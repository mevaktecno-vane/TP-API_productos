__pycache__
"""


---


## 5) `api/app/main.py`


```python
from typing import List, Optional
from fastapi import FastAPI
from pydantic import BaseModel
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker
import os


# Obtener DATABASE_URL desde la variable de entorno
DATABASE_URL = os.getenv(
"DATABASE_URL",
"postgresql+psycopg2://postgres:postgres@localhost:5432/productos_db",
)


# Configuración SQLAlchemy (síncrona, simple)
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)
Base = declarative_base()


class Product(Base):
__tablename__ = "products"
id = Column(Integer, primary_key=True, index=True)
name = Column(String, nullable=False)
description = Column(String, nullable=True)


# Crear tablas si no existen (se ejecuta al importar main)
Base.metadata.create_all(bind=engine)


# Pydantic models
class ProductCreate(BaseModel):
name: str
description: Optional[str] = None


class ProductOut(ProductCreate):
id: int


app = FastAPI(title="TP API Productos")


@app.post("/products", response_model=ProductOut)
def create_product(product: ProductCreate):
db = SessionLocal()
db_product = Product(name=product.name, description=product.description)
db.add(db_product)
db.commit()
db.refresh(db_product)
db.close()
return db_product


@app.get("/products", response_model=List[ProductOut])
def list_products():
db = SessionLocal()
products = db.query(Product).all()
db.close()
return products